/*****************************************************************************
 * String Processing Const Data
 ****************************************************************************/

static const char digits[] = "0123456789abcdef";

                      
/*****************************************************************************
 * String Processing Helper Functions
 ****************************************************************************/

/**
 * @brief Calculate the length of a null-terminated string.
 *
 * @param ch Pointer to the string.
 * @return Length of the string.
 */
static int gdb_strlen(const char *ch)
{
    int len;

    len = 0;
    while (*ch++) {
        len += 1;
    }

    return len;
}

/**
 * @brief Convert a string to an integer.
 *
 * @param str Pointer to the string representation of the integer.
 * @param len Length of the string.
 * @param base Base for integer conversion.
 * @param endptr If specified, will point to the last non-digit character in the string.
 * @return The integer value of the string.
 */
static int gdb_strtol(const char *str, unsigned int len, int base,
                      const char **endptr)
{
    unsigned int pos;
    int sign, tmp, value, valid;

    value = 0;
    pos   = 0;
    sign  = 1;
    valid = 0;

    if (endptr) {
        *endptr = NULL;
    }

    if (len < 1) {
        return 0;
    }

    /* Detect negative numbers */
    if (str[pos] == '-') {
        sign = -1;
        pos += 1;
    } else if (str[pos] == '+') {
        sign = 1;
        pos += 1;
    }

    /* Detect '0x' hex prefix */
    if ((pos + 2 < len) && (str[pos] == '0') &&
        ((str[pos+1] == 'x') || (str[pos+1] == 'X'))) {
        base = 16;
        pos += 2;
    }

    if (base == 0) {
        base = 10;
    }

    for (; (pos < len) && (str[pos] != '\x00'); pos++) {
        tmp = gdb_get_val(str[pos], base);
        if (tmp == GDB_EOF) {
            break;
        }

        value = value*base + tmp;
        valid = 1; /* At least one digit is valid */
    }

    if (!valid) {
        return 0;
    }

    if (endptr) {
        *endptr = str+pos;
    }

    value *= sign;

    return value;
}

/**
 * @brief Get the corresponding ASCII hex digit for a value.
 *
 * @param val Integer value (0-15).
 * @return The corresponding ASCII hex digit or GDB_EOF if the value is not valid.
 */
static char gdb_get_digit(int val)
{
    if ((val >= 0) && (val <= 0xf)) {
        return digits[val];
    } else {
        return GDB_EOF;
    }
}

/**
 * @brief Get the integer value for a given ASCII character.
 *
 * @param digit ASCII character (digit).
 * @param base Base of the number system (2-16).
 * @return The corresponding integer value or GDB_EOF if the character is not a valid digit in the given base.
 */
static int gdb_get_val(char digit, int base)
{
    int value;

    if ((digit >= '0') && (digit <= '9')) {
        value = digit-'0';
    } else if ((digit >= 'a') && (digit <= 'f')) {
        value = digit-'a'+0xa;
    } else if ((digit >= 'A') && (digit <= 'F')) {
        value = digit-'A'+0xa;
    } else {
        return GDB_EOF;
    }

    return (value < base) ? value : GDB_EOF;
}

#if DEBUG
/**
 * @brief Check if a character is printable ASCII.
 *
 * @param ch Character to check.
 * @return 1 if the character is printable ASCII, 0 otherwise.
 */
static int gdb_is_printable_char(char ch)
{
    return (ch >= 0x20 && ch <= 0x7e);
}
#endif
